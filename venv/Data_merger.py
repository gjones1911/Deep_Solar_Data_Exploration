#import data_display as dd
#import numpy as np
#import sklearn
#from sklearn.decomposition import FactorAnalysis
import pandas as pd
#import statsmodels as sm
from Deep_Solar_aid import *
#m,from  GJ_Utils.util import show_list

newFile = r'K:\TVA_SVI\TVA_DS_SVI_NREL.xlsx'
TVADSSVI = r'K:\TVA_SVI\Data_Sets\TVA_DS_SVI_NREL8_26_b.xlsx'
NREL_seeds = r'K:\TVA_SVI\Data_Sets\TVA_OLD_SVI.xlsx'
occupations_cols = ['fips',
					'occupation_information_rate',
					'occupation_administrative_rate',
					'occupation_information_rate',
					'occupation_finance_rate',
					'occupation_arts_rate',
					'occupation_education_rate',
					'occupation_agriculture_rate',
					'occupation_construction_rate',
					'occupation_transportation_rate',
					'occupation_manufacturing_rate',
					'occupation_retail_rate',
					'occupation_wholesale_rate',
					'occupation_public_rate']
seeds_use = ["geoid",
			 "gisjoin",
             "area_km2",
             "centroid_x",
             "very_low_mf_own_hh",
             "very_low_mf_rent_hh",
             "very_low_sf_own_hh",
             "very_low_sf_rent_hh",
             "low_mf_own_hh",
             "low_mf_rent_hh",
             "low_sf_own_hh",
             "low_sf_rent_hh",
             "mod_mf_own_hh",
             "mod_mf_rent_hh",
             "mod_sf_own_hh",
             "mod_sf_rent_hh",
             "mid_mf_own_hh",
             "mid_mf_rent_hh",
             "mid_sf_own_hh",
             "mid_sf_rent_hh",
             "high_mf_own_hh",
             "high_mf_rent_hh",
             "high_sf_own_hh",
             "high_sf_rent_hh",
             "very_low_mf_own_bldg_cnt",
             "very_low_mf_rent_bldg_cnt",
             "very_low_sf_own_bldg_cnt",
             "very_low_sf_rent_bldg_cnt",
             "low_mf_own_bldg_cnt",
             "low_mf_rent_bldg_cnt",
             "low_sf_own_bldg_cnt",
             "low_sf_rent_bldg_cnt",
             "mod_mf_own_bldg_cnt",
             "mod_mf_rent_bldg_cnt",
             "mod_sf_own_bldg_cnt",
             "mod_sf_rent_bldg_cnt",
             "mid_mf_own_bldg_cnt",
             "mid_mf_rent_bldg_cnt",
             "mid_sf_own_bldg_cnt",
             "mid_sf_rent_bldg_cnt",
             "high_mf_own_bldg_cnt",
             "high_mf_rent_bldg_cnt",
             "high_sf_own_bldg_cnt",
             "high_sf_rent_bldg_cnt",
			 "very_low_mf_own_devp_cnt",
			 "very_low_mf_rent_devp_cnt",
			 "very_low_sf_own_devp_cnt",
			 "very_low_sf_rent_devp_cnt",
			 "low_mf_own_devp_cnt",
			 "low_mf_rent_devp_cnt",
			 "low_sf_own_devp_cnt",
			 "low_sf_rent_devp_cnt",
			 "mod_mf_own_devp_cnt",
			 "mod_mf_rent_devp_cnt",
			 "mod_sf_own_devp_cnt",
			 "mod_sf_rent_devp_cnt",
			 "mid_mf_own_devp_cnt",
			 "mid_mf_rent_devp_cnt",
			 "mid_sf_own_devp_cnt",
			 "mid_sf_rent_devp_cnt",
			 "high_mf_own_devp_cnt",
			 "high_mf_rent_devp_cnt",
			 "high_sf_own_devp_cnt",
			 "high_sf_rent_devp_cnt",
			 "very_low_mf_own_devp_m2",
			 "very_low_mf_rent_devp_m2",
			 "very_low_sf_own_devp_m2",
			 "very_low_sf_rent_devp_m2",
			 "low_mf_own_devp_m2",
			 "low_mf_rent_devp_m2",
			 "low_sf_own_devp_m2",
			 "low_sf_rent_devp_m2",
			 "mod_mf_own_devp_m2",
			 "mod_mf_rent_devp_m2",
			 "mod_sf_own_devp_m2",
			 "mod_sf_rent_devp_m2",
			 "mid_mf_own_devp_m2",
			 "mid_mf_rent_devp_m2",
			 "mid_sf_own_devp_m2",
			 "mid_sf_rent_devp_m2",
			 "high_mf_own_devp_m2",
			 "high_mf_rent_devp_m2",
			 "high_sf_own_devp_m2",
			 "high_sf_rent_devp_m2",
			 "very_low_mf_own_mw",
			 "very_low_mf_rent_mw",
			 "very_low_sf_own_mw",
			 "very_low_sf_rent_mw",
			 "low_mf_own_mw",
			 "low_mf_rent_mw",
			 "low_sf_own_mw",
			 "low_sf_rent_mw",
			 "mod_mf_own_mw",
			 "mod_mf_rent_mw",
			 "mod_sf_own_mw",
			 "mod_sf_rent_mw",
			 "mid_mf_own_mw",
			 "mid_mf_rent_mw",
			 "mid_sf_own_mw",
			 "mid_sf_rent_mw",
			 "high_mf_own_mw",
			 "high_mf_rent_mw",
			 "high_sf_own_mw",
			 "high_sf_rent_mw",
			 "very_low_mf_own_mwh",
			 "very_low_mf_rent_mwh",
			 "very_low_sf_own_mwh",
			 "very_low_sf_rent_mwh",
			 "low_mf_own_mwh",
			 "low_mf_rent_mwh",
			 "low_sf_own_mwh",
			 "low_sf_rent_mwh",
			 "mod_mf_own_mwh",
			 "mod_mf_rent_mwh",
			 "mod_sf_own_mwh",
			 "mod_sf_rent_mwh",
			 "mid_mf_own_mwh",
			 "mid_mf_rent_mwh",
			 "mid_sf_own_mwh",
			 "mid_sf_rent_mwh",
			 "high_mf_own_mwh",
			 "high_mf_rent_mwh",
			 "high_sf_own_mwh",
			 "high_sf_rent_mwh",
			 "very_low_mf_own_elep_hh",
			 "very_low_mf_rent_elep_hh",
			 "very_low_sf_own_elep_hh",
			 "very_low_sf_rent_elep_hh",
			 "low_mf_own_elep_hh",
			 "low_mf_rent_elep_hh",
			 "low_sf_own_elep_hh",
			 "low_sf_rent_elep_hh",
			 "mod_mf_own_elep_hh",
			 "mod_mf_rent_elep_hh",
			 "mod_sf_own_elep_hh",
			 "mod_sf_rent_elep_hh",
			 "high_mf_own_elep_hh",
			 "high_mf_rent_elep_hh",
			 "high_sf_own_elep_hh",
			 "high_sf_rent_elep_hh",
			 "company_na",
			 "company_ty",
			 "eia_id",
			 "cust_cnt",
			 "avg_monthly_consumption_kwh",
			 "avg_monthly_bill_dlrs",
			 "dlrs_kwh",
			 "avg_pbi_usd_p_kwh",
			 "avg_cbi_usd_p_w",
			 "avg_ibi_pct",
             "hh_gini_index",
             "pop_total",
			 "pop_male",
			 "pop_female",
 			 "pop_over_65",
			 "pop_under_18",
			 "hu_monthly_owner_costs_lessthan_1000dlrs",
			 "hu_monthly_owner_costs_greaterthan_1000dlrs",
			 "hu_own",
			 "hu_rent",
			 "hu_vintage_2010toafter",
			 "hu_vintage_2000to2009",
			 "hu_vintage_1980to1999",
			 "hu_vintage_1960to1970",
			 "hu_vintage_1940to1959",
			 "hu_vintage_1939toearlier",
			 "hu_med_val",
			 "hu_mortgage",
			 "hu_no_mortgage",
             "climate_zone",
             "climate_zone_description",
             "moisture_regime",
             "locale",
             "active_subsidies",
			 "avg_months_tenancy",
             "pct_eli_hh",
			 "lihtc_qualified"]
DS_use = ["solar_system_count",
		  "residential_PVarea_by_land_area",
		  "A_o_NA",
			 "PVaByHa",
			 "ZPVaByHa",
			 "Znumber_of_solar_system_per_household",
			 "number_of_solar_system_per_household",
			 "Ln_PV_per_home",
			 "total_panel_area_residential",
			 "solar_system_count_residential",
			 "Zsolar_system_count_residential",
 			 "average_household_income",
			 "Zaverage_household_income",
			 "diversity",
			 "Zdiversity",
 			 "E_PCI",
			 "EP_PCI",
			 "EPL_PCI",
			 "Zemploy_rate",
			 "Zemployed",
			 "Zunemployed",
			 "unemployed",
			 "employ_rate",
			 "employed",
			 "population",
			 "Zpopulation",
			 "POP_DEN_scaled",
			 "Zpopulation_density",
			 "population_density",
			 "E_TOTPOP",
			 "E_DAYPOP_scaled",
			 "E_DAYPOP",
			 "pct_E_Day_POP",
			 "ZE_DAYPOP",
			 "EP_POV",
			 "EPL_POV",
			 "poverty_family_below_poverty_level_rate",
			 "poverty_family_below_poverty_level",
			 "poverty_family_count",
			 "Years_edu_sqr",
			 "number_of_years_of_education",
			 "Znumber_of_years_of_education",
			 "gini_index",
			 "avg_electricity_retail_rate",
			 "electricity_price_residential",
			 "electricity_consume_residential",
			 "Zavg_electricity_retail_rate",
			 "Zelectricity_price_residential",
			 "Zelectricity_consume_residential",
			 "Zaverage_household_size",
		    "average_household_size",
            "housing_unit_median_value",
			"household_type_family_rate",
			 "Zhousehold_type_family_rate",
			 "mortgage_with_rate",
			 "Zmortgage_with_rate",
			 "Zheating_fuel_fuel_oil_kerosene_rate",
			 "Zheating_fuel_coal_coke_rate",
			 "heating_fuel_gas_rate",
			 "health_insurance_public_rate",
			 "health_insurance_none_rate",
			 "E_UNINSUR",
			 "EP_UNINSUR",
			 "SPL_THEME1",
			 "RPL_THEME1",
			 "SPL_THEME2",
			 "RPL_THEME2",
			 "SPL_THEME3",
			 "RPL_THEME3",
			 "SPL_THEME4",
			 "RPL_THEME4",
			 "RPL_THEMES",
 			 "state",
			 "county",
			 "fips",
			 "total_area",
			 "Ztotal_area",
			 "land_area",
			 "Zland_area",
			 "water_area",
			 "lat",
			 "lon",
			 "elevation",
			 "Zelevation",
			 "heating_design_temperature",
			 "Zheating_design_temperature",
			 "cooling_design_temperature",
			 "Zcooling_design_temperature",
			 "Zatmospheric_pressure",
			 "Zwind_speed",
			 "Zearth_temperature",
			 "Zheating_degree_days",
			 "Zcooling_degree_days",
			 "earth_temperature_amplitude",
			 "Zearth_temperature_amplitude",
			 "frost_days",
			 "Zfrost_days",
			 "air_temperature",
			 "Zair_temperature",
			 "relative_humidity",
			 "Zrelative_humidity",
			 "Zdaily_solar_radiation",
			 "daily_solar_radiation",
			 "atmospheric_pressure",
			 "wind_speed",
			 "earth_temperature",
			 "heating_degree_days",
			 "cooling_degree_days",
			 "age_recode",
			 "age_median",
			 "age25_65",
 			 "Zage_recode",
			 "Zage_median",
			 "Zeducation_population_over_25",
			 "Zage25_65",
			 "education_population_over_25",
 			 "GOP_dominate_jobs1",
			 "DEM_dominate_jobs1",
 			 "ZDEM_dominate_jobs1",
			 "ZGOP_dominate_jobs1",
			 "Tech_Edu_Info_jobs",
			 "Non_tech_jobs",
			 "ZNon_tech_jobs",
			 "Green_travelers3",
			 "ZGreen_travelers3",
			 "travel_time_average",
			 "Ztravel_time_average",
			 "Zvoting_2016_dem_percentage",
			 "Zvoting_2016_gop_percentage",
			 "Zvoting_2012_dem_percentage",
			 "Zvoting_2012_gop_percentage",
			 "voting_2016_dem_percentage",
			 "voting_2016_gop_percentage",
			 "voting_2012_dem_percentage",
			 "voting_2012_gop_percentage",
		  	 "incentive_count_residential",
			 "Zincentive_count_residential",
			 "net_metering",
			 "feedin_tariff",
			 "cooperate_tax",
			 "property_tax",
			 "sales_tax",
			 "rebate",
			 "incentive_residential_state_level",
			 "Zincentive_residential_state_level",
			 "Znet_metering",
			 "Zfeedin_tariff",
			 "Zproperty_tax"]

#tvads_df = pd.read_excel(TVADSSVI, usecols=DS_use)
tva_df = pd.read_excel(TVADSSVI)
#nrel_df = pd.read_excel(NREL_seeds, usecols=seeds_use)
occup_df = pd.read_excel(NREL_seeds, usecols=occupations_cols)
#nrel_df = pd.read_excel(NREL_seeds)
cnt = 0
#for l in nrel_df.columns:
##for l in tvads_df.columns:
#    if cnt == 0:
#        print('["{:s}",'.format(l))
#    elif cnt == len(nrel_df.columns)-1:
#        print('\t\t\t "{:s}"]'.format(l))
#    else:
#        print('\t\t\t "{:s}",'.format(l))
##    cnt += 1

# now merge
ds_merge = 'fips'
nrel_merge = 'fips'

#print(tvads_df[ds_merge].values[0:4])
#print(nrel_df[nrel_merge].values[0:4])

#print('the length of original is {:d}'.format(len(tvads_df)))

#locales = list(set(nrel_df['locale'].values))


#for l in locales:
#    if cnt == 0:
#        print('["{:s}",'.format(l))
#    elif cnt == len(nrel_df.columns)-1:
#        print('\t\t\t "{:s}"]'.format(l))
#    else:
#        print('\t\t\t "{:s}",'.format(l))
#    cnt += 1

tva_df.merge(occup_df, left_on=ds_merge, right_on=nrel_merge).to_excel(newFile, index=False)

